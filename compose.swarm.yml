version: "3.8"

services:
    gateway:
        image: "tulpje-gateway${IMAGE_SUFFIX}"
        init: true
        deploy:
            mode: replicated
            replicas: "${SHARD_COUNT}"
            update_config:
                parallelism: 1
                delay: 10s
                monitor: 5s
                order: start-first
        environment:
            TASK_SLOT: "{{ .Task.Slot }}"
            SHARD_COUNT:
        secrets:
            - "rust_log"
            - "discord_token"
            - "discord_gateway_queue"
            - "rabbitmq_address"
            - "discord_proxy"
            - "redis_url"
        depends_on:
            - "valkey"
            - "rabbitmq"
            - "discord_proxy"
            - "gateway_queue"
    handler:
        image: "tulpje-handler${IMAGE_SUFFIX}"
        init: true
        deploy:
            mode: replicated
            replicas: "${HANDLER_COUNT}"
            update_config:
                parallelism: 1
                delay: 10s
                monitor: 5s
                order: start-first
        environment:
            TASK_SLOT: "{{ .Task.Slot }}"
            HANDLER_COUNT:
        secrets:
            - "rust_log"
            - "rabbitmq_address"
            - "discord_proxy"
            - "redis_url"
            - "database_url"
        depends_on:
            - "valkey"
            - "postgres"
            - "rabbitmq"
            - "discord_proxy"
    gateway_queue:
        image: "gateway-queue${IMAGE_SUFFIX}"
        init: true
        # NOTE: Unfortunately can't health check, only endpoint is the queue for rate limiting
        secrets:
            - "discord_token"
    discord_proxy:
        image: "discord-proxy${IMAGE_SUFFIX}"
        init: true
        healthcheck:
            test: ["CMD", "/bin/check-http", "HEAD", "http://localhost/metrics"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        secrets:
            - "discord_token"
    postgres:
        # https://hub.docker.com/_/postgres
        image: "postgres:17.2"
        environment:
            POSTGRES_DB_FILE: "/run/secrets/postgres_db"
            POSTGRES_USER_FILE: "/run/secrets/postgres_user"
            POSTGRES_PASSWORD_FILE: "/run/secrets/postgres_password"
        secrets:
            - "postgres_db"
            - "postgres_user"
            - "postgres_password"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s
        volumes: [ "postgres:/var/lib/postgresql/data" ]
    valkey:
        # https://hub.docker.com/r/valkey/valkey
        image: "valkey/valkey:8.0.1"
        environment:
            # persist every 60s if at least one write was done
            VALKEY_EXTRA_FLAGS: "--save 60 1"
        healthcheck:
            test: ["CMD-SHELL", "valkey-cli ping | grep PONG"]
            interval: 5s
            timeout: 3s
            retries: 3
            start_period: 10s
        volumes: [ "valkey:/data" ]
    rabbitmq:
        # hostname needs to match hostname we connect with
        hostname: "rabbitmq"
        image: "rabbitmq:4.0.4"
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s
        # TODO: Configure persistence

secrets:
    discord_token:         { file: "_secrets/discord_token" }
    postgres_db:           { file: "_secrets/postgres_db" }
    postgres_user:         { file: "_secrets/postgres_user" }
    postgres_password:     { file: "_secrets/postgres_password" }
    database_url:          { file: "_secrets/database_url" }
    rabbitmq_address:      { file: "_secrets/rabbitmq_address" }
    discord_proxy:         { file: "_secrets/discord_proxy" }
    discord_gateway_queue: { file: "_secrets/discord_gateway_queue" }
    redis_url:             { file: "_secrets/redis_url" }
    rust_log:              { file: "_secrets/rust_log" }

volumes:
    postgres:
    valkey:
