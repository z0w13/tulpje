name: "tulpje"

services:
    gateway:
        image: "tulpje-gateway${IMAGE_SUFFIX}"
        profiles: [ "full" ]
        build:
            context: "."
            dockerfile: "docker/Dockerfile.gateway"
        init: true
        environment:
            - SHARD_ID
            - SHARD_COUNT
        secrets:
            - "rust_log"
            - "discord_token"
            - "discord_gateway_queue"
            - "rabbitmq_address"
            - "discord_proxy"
            - "redis_url"
        depends_on:
            valkey: { condition: service_healthy }
            rabbitmq: { condition: service_healthy }
            discord_proxy: { condition: service_started }
            gateway_queue: { condition: service_started }
    handler:
        image: "tulpje-handler${IMAGE_SUFFIX}"
        profiles: [ "full" ]
        build:
            context: "."
            dockerfile: "docker/Dockerfile.handler"
        init: true
        environment:
            - HANDLER_ID
            - HANDLER_COUNT
            - RUST_BACKTRACE=1
        secrets:
            - "rust_log"
            - "rabbitmq_address"
            - "discord_proxy"
            - "redis_url"
        depends_on:
            valkey: { condition: service_healthy }
            postgres: { condition: service_healthy }
            rabbitmq: { condition: service_healthy }
            discord_proxy: { condition: service_started }
    gateway_queue:
        image: "gateway-queue${IMAGE_SUFFIX}"
        build:
            context: "."
            dockerfile: "docker/Dockerfile.gateway-queue"
            additional_contexts:
                upstream: "docker-image://ghcr.io/twilight-rs/gateway-queue@sha256:b6614d239663e3bcc10d9a72bd42d68a41f693d738a55605324b590f0f798417"
        init: true
        # NOTE: Unfortunately can't health check, only endpoint is the queue for rate limiting
        secrets:
            - "discord_token"
    discord_proxy:
        image: "discord-proxy${IMAGE_SUFFIX}"
        build:
            context: "."
            dockerfile: "docker/Dockerfile.discord-proxy"
            additional_contexts:
                # https://github.com/twilight-rs/http-proxy/pkgs/container/http-proxy
                # NOTE: ghcr.io/twilight-rs/http-proxy:metrics but pinned to hash
                # NOTE: using own fork github.com/z0w13/twilight-http-proxy because some routes are missing in upstream
                upstream: "docker-image://ghcr.io/z0w13/twilight-http-proxy@sha256:d6ed4aa50cc69d52d042f586947b45d84ac10715006c4606d1c3567b103faf6f"
        init: true
        healthcheck:
            test: ["CMD", "/bin/check-http", "HEAD", "http://localhost/metrics"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        secrets:
            - "discord_token"
    postgres:
        # https://hub.docker.com/_/postgres
        image: "postgres:17.2"
        environment:
            POSTGRES_DB_FILE: "/run/secrets/postgres_db"
            POSTGRES_USER_FILE: "/run/secrets/postgres_user"
            POSTGRES_PASSWORD_FILE: "/run/secrets/postgres_password"
        secrets:
            - "postgres_db"
            - "postgres_user"
            - "postgres_password"
        healthcheck:
            test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s
        volumes: [ "postgres:/var/lib/postgresql/data" ]
    valkey:
        # https://hub.docker.com/r/valkey/valkey
        image: "valkey/valkey:8.0.1"
        environment:
            # persist every 60s if at least one write was done
            VALKEY_EXTRA_FLAGS: "--save 60 1"
        healthcheck:
            test: ["CMD-SHELL", "valkey-cli ping | grep PONG"]
            interval: 5s
            timeout: 3s
            retries: 3
            start_period: 10s
        volumes: [ "valkey:/data" ]
    rabbitmq:
        # hostname needs to match hostname we connect with
        hostname: "rabbitmq"
        image: "rabbitmq:4.0.4"
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s
        # TODO: Configure persistence

secrets:
    shard_count:           { environment: "SHARD_COUNT" }
    discord_token:         { environment: "DISCORD_TOKEN" }
    postgres_db:           { environment: "POSTGRES_DB" }
    postgres_user:         { environment: "POSTGRES_USER" }
    postgres_password:     { environment: "POSTGRES_PASSWORD" }
    rabbitmq_address:      { environment: "RABBITMQ_ADDRESS" }
    discord_proxy:         { environment: "DISCORD_PROXY" }
    discord_gateway_queue: { environment: "DISCORD_GATEWAY_QUEUE" }
    redis_url:             { environment: "REDIS_URL" }
    rust_log:              { environment: "RUST_LOG" }

volumes:
    postgres:
    valkey:
